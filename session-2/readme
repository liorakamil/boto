At this session we would continue our boto & python journey

The session-2 directory contains several files:

config.py: general configuration file
parsing.py: module that contains functions for parsing (ex: arguments)
awsops.py: module that contains several functions to create and manipulate aws resources
subnets.py: cli script to create subnets
routes.py: cli script to create route tables and associate to subnets
natgateway.py: cli script to create nat gateways


You will need to complete the main functions of subnets.py, route.py, natgateway.py to build your vpc

*****************
** Excercises: **
*****************

1) open subnets.py,
   The code contain an example for public subnet creation (using methods from awsops)

   The tasks:
   A) complete the script to create a private subnet as well
   B) Run the sscript with arguments, here is an example:
      ./subnets.py --vpc XXXXXXXX --region us-east-1 --az us-east-1a (you can choose other az if you like)
   C) run pylint on subnets.py and fix what required according to the output
**************************************************************************************************************************************************************************

2) open natgateway.py.
   There are few things to change in order to create a nat gateway:

   The tasks:
   A) in aws.get_subnet_id call replace "get-the-correct-tag-from-config" with the correct config (is it config.PUBLIC_TAG or config.PRIVATE_TAG ?)
   B) use function wait_for_nat_gateway to wait till the nat gateway is in available state
**************************************************************************************************************************************************************************

3) open routes.py.
   You can see an example for creating public route table, default gateway route in the routing table and associate the table
   to the subnet we tagged as public

   The tasks:
   A) complete the script and create private route table with route as the natgw you created at (2), assoicate the route table
      with the private subnet
   B) Here is an example for running the script with arguments: ./routes.py --vpcid your-vpc-id --region us-east-1 --internetgw your-igw-id --natgw your-natgw-id
**************************************************************************************************************************************************************************

4) Wrap each aws boto call in awsops.py with try/except (see example at allocate_address)
